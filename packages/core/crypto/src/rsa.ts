import { KeyLike, createSign, createVerify } from 'crypto'

/**
 * Generate a signature based on data and a private key
 * @param data Data to be signed, often the result of a serializer implementation
 * @param key A private key used for the signer
 * @param encoding The textual encoding to use for the returned signature, default='base64'
 */
export async function generateSignature(
  data: string,
  key: KeyLike,
  encoding: 'base64' | 'hex' = 'base64'
): Promise<string> {
  let signer = createSign('RSA-SHA1')
  signer.update(data, 'utf8')
  return signer.sign(key, encoding)
}

/**
 * Verify data against a signature
 * @param data data to verify against the signature
 * @param signature Signature generated by the private key
 * @param key A public key used to verify
 * @param encoding The encoding of the signature, default 'base64'
 */
export async function verifySignature(
  data: string,
  signature: string,
  key: KeyLike,
  encoding: 'base64' | 'hex' = 'base64'
): Promise<boolean> {
  let verifier = createVerify('RSA-SHA1')
  verifier.update(data, 'utf8')
  return verifier.verify(key, signature, encoding)
}
